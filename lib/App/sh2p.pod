
=head1 NAME

App::sh2p - Perl program to aid for conversion from UNIX shell to Perl

=head1 SYNOPSIS

  sh2p.pl [-i] [-r] [-f] script-name output-file | script-name [...] output-directory

-i Do not use integer
-r Do not use runtime
-f Clobber output files in the output directory

This Perl script, and associated modules in the sh2p directory, 
will attempt to convert the supplied shell script/s to Perl.  

CAVEAT: Incorrect shell commands will result in incorrect Perl!

=head1 DESCRIPTION

This program attempts to convert the base syntax of a UNIX shell script to Perl.  
It does not attempt to redesign the script for Perl but to assist in the conversion 
process by automating much of the tedium.

It can be run by either supplying the input and output file names, or by supplying
a list of input file names and an output directory, which must be the right-most 
parameter and must already exist.  If hyphen ('-') is supplied for either input or output file name
then STDIN is read or STDOUT written to (not valid as a directory name).

The output file will be overwritten if it exists.  
If the directory output form is taken then an output file name is generated from the
input file name, with '.pl' appended (any existing 'extension' will be removed).  If
this file already exists then the user will be prompted for permission to overwrite it,
unless the -f (force) option is given.
  
The generated code will:
    use integer;
The POSIX shell only supports integer arithmetic, this may be supressed with the -i option
          
    use sh2p::Runtime;
This is (currently) required if the shell 'read' statement is used, 
however it is always included unless supressed with the -r option
  

=head2 INSPECT messages

These are output whenever sh2p detects code which requires manual intervention,
which is often.  A message of the format '**** INSPECT: free-text' is written to 
the output script as a comment.  A similar message is written to STDERR, prefixed 
by the line number and grouped by file.

=head2 Here documents

These work in the shell by writing a temporary file and
then reading it.  We use a similar method here, except the
directory used is taken from the environment variable SH2P_HERE_DIR.
If that is not set then the current directory is used.

The heredoc data is extracted from the script and written to a file named
label.here, where 'label' is the label used to identify the heredoc.

Currently external programs reading from a heredoc require manual intervention.

=head2 External programs and built-ins

It is tempting to substitute Perl built-ins for external programs like chmod, rm,
and so on.  However the return codes are different and require a different testing
regime.  Therefore these are identified by an INSPECT message.

=head2 Redirection

When redirection is done in the shell the file is opened, read or written, then closed.
This is exactly what is generated by the conversion.  It might not be what you want, 
but at least demonstrates some of the inefficiencies of using a shell.  INSPECT messages
are not generated for this.

=head1 Know bugs and short comings (TODO):

=head2 Bugs

External and function calls inside a condition are indented

expr should be handled

back-ticks on rhs are not handled correctly in all cases

=head2 Shortcomings

Pipelines are problematic, and right now all I do is output some advice
typedef/declare support is limited

=head3 $?
Currently $? is not traced back to the previous command.
It is intended to implement a second pass in a future release.

=head3 unset
The assumption is made that the variable is a scalar

=head3 Currently unsupported :
   Array assignments
   ${  } notations
   extended shell pattern matching constructs (Compound::ksh_test)
   Multiple levels in 'break' and 'continue'
   Nested 'here' documents
   Nested 'case' statements
   Options to the 'export' command
   tilde ~ expansions

=head 3 The following built-ins are currently not converted:
                 alias    
                 bg       
                 bind     
                 builtin  
                 command  
                 eval     
                 exec         
                 false    
                 fc       
                 fg       
                 getopts  
                 hash     
                 jobs       
                 let      
                 pwd      
                 readonly   
                 shift    
                 time     
                 times    
                 trap     
                 true     
                 ulimit   
                 umask    
                 unalias   
                 wait     
                 whence   

The following compound statements are currently unsupported:
                  'select'   
                  'time'          

The following operators are currently unsupported:
                '|&'
                 '&'



=head1 SEE ALSO



=head1 AUTHOR

Clive Darke, E<lt>clive.darke@talk21.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2008 by C.B.Darke

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.0 or,
at your option, any later version of Perl 5 you may have available.


=cut





